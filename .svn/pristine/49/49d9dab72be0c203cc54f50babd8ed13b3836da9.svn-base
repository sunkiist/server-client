#define WIN32_LEAN_AND_MEAN
#define _WINSOCK_DEPRECATED_NO_WARNINGS 
#define _CRT_SECURE_NO_WARNINGS //为了能写scanf
#include<WinSock2.h> //此头文件必须在前面
#include<windows.h>  //windows socket
#include<iostream>
#include <stdio.h>
#include<string.h>
#pragma comment(lib,"ws2_32.lib")//添加链接库

struct DataPackage {
	int age;//服务端和客户端的字节大小、对齐方式必须相同，所以慎用long
	char name[32];
};
int main() {
	WORD ver = MAKEWORD(2, 2);//表示使用WINSOCK2版本
	WSADATA dat;//第二个参数是指向WSADATA的指针.该函数返回一个INT型值, 通过检查这个值来确定初始化是否成功
	WSAStartup(ver, &dat);
	SOCKET _sock=socket(AF_INET, SOCK_STREAM, 0);
	if (INVALID_SOCKET == _sock) {
		printf("错误，建立socket失败...\n");
	}
	else {
		printf("成功,建立socket成功\n");
	}
	sockaddr_in _sin = {};
	_sin.sin_family = AF_INET;
	_sin.sin_port = htons(4567);
	_sin.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");
	int ret=connect(_sock, (sockaddr*)&_sin, sizeof(sockaddr_in));
	if (SOCKET_ERROR == ret) {
		printf("错误，连接服务器失败\n");
	}
	else {
		printf("成功，连接服务器成功\n");
		
	}
	
	while (true) {
		//3 输入请求命令
		char cmdBuf[128] = {};
		scanf("%s", cmdBuf);
		//4 处理请求
		if (0 == strcmp(cmdBuf, "exit"))
		{
			break;
		}
		else {
			//5 向服务器发送请求命令
			send(_sock, cmdBuf, strlen(cmdBuf) + 1, 0);
		}
		//6 接收服务器信息recv
		char recvBuf[128] = {};
		int nLen = recv(_sock, recvBuf, 128, 0);
		if (nLen > 0) {
			DataPackage* dp = (DataPackage*)recvBuf;
			printf("接收到数据年龄:%d,姓名=%s\n",dp->age,dp->name );
		}
	}
	closesocket(_sock);
	WSACleanup();
	printf("已退出。");
	getchar();
	return 0;
}